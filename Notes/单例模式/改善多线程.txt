处理多线程：
通过增加关键字synchronized到getInstance()方法中，使每个线程在进入该方法前，要先等候别的线程离开该方法。即不会有两个线程可以同时进入这个方法。但同步会造成程序运行效率降低

解决方法：
1.如果getInstance()的性能对应用程序不是很关键（可以接受getInstance()造成的额外负担），就无需考虑。同步getInstance()的方法既简单又有效。
2.如果将getInstance()的程序使用在频繁运行的地方，则可以使用“急切"创建实例，而不用延迟实例化的做法：
1.在静态初始化器中创建单例，保证线程安全；private static Singleton uniqueInstance = new Singleton();
2.getInstance()方法直接返回实例； return unqiueInstance;
利用此做法，依赖JVM在加载这个类时马上创建此唯一的单件实例，JVM保证在任何线程访问uniqueInstance静态变量之前，一定先创建此实例。
3.用”双重检查加锁“，在getInstance()中减少使用同步:
利用双重检查加锁(double-checked locking)，首先检查是否实例已经创建了，如果尚未创建，”才“进行同步。如此便只有第一次会同步，如果性能是你关心的重点，这个做法可以大大减少getInstance()的时间耗费.
示例代码：
pulic class Singleton {
private volatile static Singleton unqueInstance;//volatile关键词确保当uniqueInstance变量被初始化成Singleton实例时，多个线程正确地处理uniqueInstance变量
private Singleton(){}

public static Singleton getInstance(){
if(uniqueInstance == null)//检查实例，如果不存在，就进入同步区块。注：只有第一次才彻底执行这里的代码。
synchronized (Singleton.class){
if(uniqueInstance == null){//进入区块后，再检查一次，如果仍然是null，才创建实例
uniqueInstance = new Singleton();
}
}
}
return uniqueInstance;
}
}

注意：双重检查加锁不适用于1.4以及更早版本的Java
